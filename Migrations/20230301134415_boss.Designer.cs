// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using web_api;

#nullable disable

namespace web_api.Migrations
{
    [DbContext(typeof(PogwartsContext))]
    [Migration("20230301134415_boss")]
    partial class boss
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CharacterInventoryArmor", b =>
                {
                    b.Property<int>("ArmorId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("ArmorId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("CharacterInventoryArmor");
                });

            modelBuilder.Entity("web_api.Models.Armor", b =>
                {
                    b.Property<int>("ArmorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ArmorId"));

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.HasKey("ArmorId");

                    b.ToTable("Armor", (string)null);
                });

            modelBuilder.Entity("web_api.Models.Boss", b =>
                {
                    b.Property<int>("BossId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BossId"));

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxDamage")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<int>("MinDamage")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BossId");

                    b.ToTable("Boss", (string)null);

                    b.HasData(
                        new
                        {
                            BossId = 1,
                            Defense = 50,
                            Health = 1000,
                            IsAlive = true,
                            Level = 50,
                            MaxDamage = 74,
                            MaxHealth = 1000,
                            MinDamage = 48,
                            Name = "Malakar the Dark Lord"
                        },
                        new
                        {
                            BossId = 2,
                            Defense = 50,
                            Health = 1000,
                            IsAlive = true,
                            Level = 50,
                            MaxDamage = 62,
                            MaxHealth = 1000,
                            MinDamage = 47,
                            Name = "Drogath the Colossus Ogre"
                        },
                        new
                        {
                            BossId = 3,
                            Defense = 50,
                            Health = 1000,
                            IsAlive = true,
                            Level = 50,
                            MaxDamage = 65,
                            MaxHealth = 1000,
                            MinDamage = 41,
                            Name = "Azura the Elemental Queen"
                        },
                        new
                        {
                            BossId = 4,
                            Defense = 50,
                            Health = 1000,
                            IsAlive = true,
                            Level = 50,
                            MaxDamage = 67,
                            MaxHealth = 1000,
                            MinDamage = 46,
                            Name = "Ragnarok the World Ender"
                        });
                });

            modelBuilder.Entity("web_api.Models.Character", b =>
                {
                    b.Property<int>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterId"));

                    b.Property<int?>("ActiveContractContractId")
                        .HasColumnType("int");

                    b.Property<int>("AvailableAttributePoints")
                        .HasColumnType("int");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<int>("Dexterity")
                        .HasColumnType("int");

                    b.Property<int?>("EquippedArmorArmorId")
                        .HasColumnType("int");

                    b.Property<int?>("EquippedWeaponId")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<int>("HighestLevelOfKilledMonsters")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("CharacterId");

                    b.HasIndex("ActiveContractContractId");

                    b.HasIndex("EquippedArmorArmorId");

                    b.HasIndex("EquippedWeaponId")
                        .IsUnique()
                        .HasFilter("[EquippedWeaponId] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("Character", (string)null);
                });

            modelBuilder.Entity("web_api.Models.Contract", b =>
                {
                    b.Property<int>("ContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContractId"));

                    b.Property<string>("ActiveCharacter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumEnemies")
                        .HasColumnType("int");

                    b.Property<int>("RewardCoins")
                        .HasColumnType("int");

                    b.HasKey("ContractId");

                    b.ToTable("Contract", (string)null);
                });

            modelBuilder.Entity("web_api.Models.Enemy", b =>
                {
                    b.Property<int>("EnemyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnemyId"));

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("Defense")
                        .HasColumnType("int");

                    b.Property<int>("Health")
                        .HasColumnType("int");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EnemyId");

                    b.ToTable("Enemy", (string)null);
                });

            modelBuilder.Entity("web_api.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("web_api.Models.Weapon", b =>
                {
                    b.Property<int>("WeaponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WeaponId"));

                    b.Property<int?>("CharactersInventoryCharacterId")
                        .HasColumnType("int");

                    b.Property<float>("CritChance")
                        .HasColumnType("real");

                    b.Property<float>("CritDamage")
                        .HasColumnType("real");

                    b.Property<int>("Damage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("LifestealChance")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("PoisonChance")
                        .HasColumnType("real");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Rarity")
                        .HasColumnType("int");

                    b.Property<float>("StunChance")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("WeaponPerkPerkId")
                        .HasColumnType("int");

                    b.HasKey("WeaponId");

                    b.HasIndex("CharactersInventoryCharacterId");

                    b.HasIndex("WeaponPerkPerkId");

                    b.ToTable("Weapon", (string)null);

                    b.HasData(
                        new
                        {
                            WeaponId = 1,
                            CritChance = 0f,
                            CritDamage = 0f,
                            Damage = 25,
                            Description = "A sword is a long, bladed weapon that is typically used for slashing or thrusting. It is commonly used in hand-to-hand combat, and can be wielded with one or two hands. Swords come in many shapes and sizes, and have been used throughout history by warriors and knights.",
                            LifestealChance = 0f,
                            Name = "Sword",
                            PoisonChance = 0f,
                            Price = 10,
                            Rarity = 0,
                            StunChance = 0f,
                            Type = 0
                        },
                        new
                        {
                            WeaponId = 2,
                            CritChance = 0f,
                            CritDamage = 0f,
                            Damage = 23,
                            Description = "A bow is a weapon that is used for firing arrows. It consists of a long, curved piece of material (such as wood or composite materials) that is strung with a taut string. Bows can be used for both hunting and warfare, and require a great deal of skill and strength to use effectively.",
                            LifestealChance = 0f,
                            Name = "Bow",
                            PoisonChance = 0f,
                            Price = 10,
                            Rarity = 0,
                            StunChance = 0f,
                            Type = 1
                        },
                        new
                        {
                            WeaponId = 3,
                            CritChance = 0f,
                            CritDamage = 0f,
                            Damage = 23,
                            Description = "A staff is a long, cylindrical weapon that is typically made from wood or metal. It can be used for both striking and blocking attacks, and is often used by martial artists or wizards.",
                            LifestealChance = 0f,
                            Name = "Staff",
                            PoisonChance = 0f,
                            Price = 10,
                            Rarity = 0,
                            StunChance = 0f,
                            Type = 2
                        });
                });

            modelBuilder.Entity("web_api.Models.WeaponPerk", b =>
                {
                    b.Property<int>("PerkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PerkId"));

                    b.Property<decimal>("CritChance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CritDamage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Damage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LifestealChance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxDamage")
                        .HasColumnType("int");

                    b.Property<int>("MinDamage")
                        .HasColumnType("int");

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<decimal>("PoisonChance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PrefixName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StunChance")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("PerkId");

                    b.ToTable("WeaponPerk", (string)null);

                    b.HasData(
                        new
                        {
                            PerkId = 1,
                            CritChance = 0m,
                            CritDamage = 0m,
                            Damage = 0m,
                            LifestealChance = 0m,
                            MaxDamage = 0,
                            MinDamage = 0,
                            Name = 0,
                            PoisonChance = 0m,
                            PrefixName = "None",
                            StunChance = 0m
                        },
                        new
                        {
                            PerkId = 2,
                            CritChance = 0m,
                            CritDamage = 0m,
                            Damage = 3m,
                            LifestealChance = 0m,
                            MaxDamage = -5,
                            MinDamage = 0,
                            Name = 1,
                            PoisonChance = 0m,
                            PrefixName = "Blunt",
                            StunChance = 0m
                        },
                        new
                        {
                            PerkId = 3,
                            CritChance = 0m,
                            CritDamage = 0m,
                            Damage = 0m,
                            LifestealChance = 0m,
                            MaxDamage = 2,
                            MinDamage = 0,
                            Name = 2,
                            PoisonChance = 0m,
                            PrefixName = "Sharp",
                            StunChance = 0m
                        },
                        new
                        {
                            PerkId = 4,
                            CritChance = 0m,
                            CritDamage = 0.2m,
                            Damage = 0m,
                            LifestealChance = 0m,
                            MaxDamage = 0,
                            MinDamage = 0,
                            Name = 3,
                            PoisonChance = 0m,
                            PrefixName = "Piercing",
                            StunChance = 0m
                        },
                        new
                        {
                            PerkId = 5,
                            CritChance = 0.1m,
                            CritDamage = 0m,
                            Damage = 0m,
                            LifestealChance = 0m,
                            MaxDamage = 0,
                            MinDamage = 0,
                            Name = 4,
                            PoisonChance = 0m,
                            PrefixName = "Precision",
                            StunChance = 0m
                        },
                        new
                        {
                            PerkId = 6,
                            CritChance = 0m,
                            CritDamage = 0m,
                            Damage = 4m,
                            LifestealChance = 0m,
                            MaxDamage = 0,
                            MinDamage = -3,
                            Name = 5,
                            PoisonChance = 0m,
                            PrefixName = "Heavy",
                            StunChance = 0m
                        },
                        new
                        {
                            PerkId = 7,
                            CritChance = 0m,
                            CritDamage = 0m,
                            Damage = 0m,
                            LifestealChance = 0.1m,
                            MaxDamage = 0,
                            MinDamage = 0,
                            Name = 6,
                            PoisonChance = 0m,
                            PrefixName = "Leeching",
                            StunChance = 0m
                        },
                        new
                        {
                            PerkId = 8,
                            CritChance = 0.1m,
                            CritDamage = 0.2m,
                            Damage = 0m,
                            LifestealChance = 0m,
                            MaxDamage = 0,
                            MinDamage = 0,
                            Name = 7,
                            PoisonChance = 0m,
                            PrefixName = "Critical",
                            StunChance = 0m
                        },
                        new
                        {
                            PerkId = 9,
                            CritChance = 0m,
                            CritDamage = 0m,
                            Damage = 0m,
                            LifestealChance = 0m,
                            MaxDamage = 0,
                            MinDamage = 0,
                            Name = 8,
                            PoisonChance = 0m,
                            PrefixName = "Stunning",
                            StunChance = 0.1m
                        },
                        new
                        {
                            PerkId = 10,
                            CritChance = 0m,
                            CritDamage = 0m,
                            Damage = 0m,
                            LifestealChance = 0m,
                            MaxDamage = 0,
                            MinDamage = 0,
                            Name = 9,
                            PoisonChance = 0.1m,
                            PrefixName = "Poison",
                            StunChance = 0m
                        });
                });

            modelBuilder.Entity("CharacterInventoryArmor", b =>
                {
                    b.HasOne("web_api.Models.Armor", null)
                        .WithMany()
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("web_api.Models.Character", null)
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("web_api.Models.Character", b =>
                {
                    b.HasOne("web_api.Models.Contract", "ActiveContract")
                        .WithMany()
                        .HasForeignKey("ActiveContractContractId");

                    b.HasOne("web_api.Models.Armor", "EquippedArmor")
                        .WithMany("CharactersEquipped")
                        .HasForeignKey("EquippedArmorArmorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("web_api.Models.Weapon", "EquippedWeapon")
                        .WithOne("CharactersEquipped")
                        .HasForeignKey("web_api.Models.Character", "EquippedWeaponId");

                    b.HasOne("web_api.Models.User", "User")
                        .WithMany("Characters")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActiveContract");

                    b.Navigation("EquippedArmor");

                    b.Navigation("EquippedWeapon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("web_api.Models.Weapon", b =>
                {
                    b.HasOne("web_api.Models.Character", "CharactersInventory")
                        .WithMany("InventoryWeapons")
                        .HasForeignKey("CharactersInventoryCharacterId");

                    b.HasOne("web_api.Models.WeaponPerk", "WeaponPerk")
                        .WithMany()
                        .HasForeignKey("WeaponPerkPerkId");

                    b.Navigation("CharactersInventory");

                    b.Navigation("WeaponPerk");
                });

            modelBuilder.Entity("web_api.Models.Armor", b =>
                {
                    b.Navigation("CharactersEquipped");
                });

            modelBuilder.Entity("web_api.Models.Character", b =>
                {
                    b.Navigation("InventoryWeapons");
                });

            modelBuilder.Entity("web_api.Models.User", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("web_api.Models.Weapon", b =>
                {
                    b.Navigation("CharactersEquipped")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
